// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeachersApp.Entity.ApplicationDbContext;

#nullable disable

namespace TeachersApp.Entity.Migrations
{
    [DbContext(typeof(TeachersAppDbcontext))]
    partial class TeachersAppDbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeachersApp.Entity.Models.ApprovalType", b =>
                {
                    b.Property<int>("ApprovalTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalTypeID"));

                    b.Property<string>("Approvaltype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ApprovalTypeID");

                    b.ToTable("ApprovalTypes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.ChangeType", b =>
                {
                    b.Property<int>("ChangeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeTypeID"));

                    b.Property<string>("ChangeText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ChangeTypeID");

                    b.ToTable("ChangeTypes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseID"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EducationTypeID")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("EducationTypeID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Designation", b =>
                {
                    b.Property<int>("DesignationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationID"));

                    b.Property<string>("DesignationText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DesignationID");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.DesignationQualification", b =>
                {
                    b.Property<int>("DesQuaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesQuaID"));

                    b.Property<int>("DesignationID")
                        .HasColumnType("int");

                    b.Property<int>("QualificationID")
                        .HasColumnType("int");

                    b.HasKey("DesQuaID");

                    b.HasIndex("DesignationID");

                    b.HasIndex("QualificationID");

                    b.ToTable("DesignationQualifications");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"));

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DistrictID");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentID"));

                    b.Property<string>("DocumentFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.HasKey("DocumentID");

                    b.HasIndex("StatusID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EducationType", b =>
                {
                    b.Property<int>("EducationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationTypeID"));

                    b.Property<string>("EductionTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EducationTypeID");

                    b.ToTable("EducationTypes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int?>("ApprovalTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ApprovalTypeReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DesignationID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeTypeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("PhotoID")
                        .HasColumnType("int");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PromotionEligible")
                        .HasColumnType("bit");

                    b.Property<int?>("PromotionSeniorityNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RetirementDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SchoolID")
                        .HasColumnType("int");

                    b.Property<int?>("SchoolPositionID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorID")
                        .HasColumnType("int");

                    b.Property<string>("UniqueID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeID");

                    b.HasIndex("ApprovalTypeID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DesignationID");

                    b.HasIndex("EmployeeTypeID");

                    b.HasIndex("PhotoID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("SchoolPositionID");

                    b.HasIndex("StatusID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("SupervisorID");

                    b.HasIndex("UniqueID")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeBloodGroup", b =>
                {
                    b.Property<int>("BloodGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BloodGroupID"));

                    b.Property<string>("BloodGroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BloodGroupID");

                    b.ToTable("EmployeeBloodGroups");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeCasteCategory", b =>
                {
                    b.Property<int>("CasteCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CasteCategoryID"));

                    b.Property<string>("CasteCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CasteCategoryID");

                    b.ToTable("EmployeeCasteCategories");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("EmployeeCategories");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeDocument", b =>
                {
                    b.Property<int>("EmployeeDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeDocumentID"));

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeDocumentID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeEducation", b =>
                {
                    b.Property<int>("EmployeecourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeecourseID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("University")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EmployeecourseID");

                    b.HasIndex("CourseID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("EmployeeEducations");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeMaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaritalStatusID"));

                    b.Property<string>("MaritalStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaritalStatusID");

                    b.ToTable("employeeMaritalStatuses");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeePersonalDetails", b =>
                {
                    b.Property<int>("EmployeeDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeDetailID"));

                    b.Property<string>("AadhaarID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BloodGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Caste")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CasteID")
                        .HasColumnType("int");

                    b.Property<bool?>("DifferentlyAbled")
                        .HasColumnType("bit");

                    b.Property<int?>("DistrictID")
                        .HasColumnType("int");

                    b.Property<bool?>("EligibilityTestQualified")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<bool?>("ExServiceMen")
                        .HasColumnType("bit");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("IdentificationMark1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IdentificationMark2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("InterReligion")
                        .HasColumnType("bit");

                    b.Property<int?>("MaritalStatusID")
                        .HasColumnType("int");

                    b.Property<string>("MotherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PEN")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PFNummber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PRAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PanID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ProtectedTeacher")
                        .HasColumnType("bit");

                    b.Property<int?>("ReligionID")
                        .HasColumnType("int");

                    b.Property<int?>("SexID")
                        .HasColumnType("int");

                    b.Property<string>("SpouseCaste")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpouseName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SpouseReligionID")
                        .HasColumnType("int");

                    b.Property<string>("VoterID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeDetailID");

                    b.HasIndex("BloodGroupID");

                    b.HasIndex("CasteID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("EmployeeID")
                        .IsUnique()
                        .HasFilter("[EmployeeID] IS NOT NULL");

                    b.HasIndex("MaritalStatusID");

                    b.HasIndex("PEN")
                        .IsUnique()
                        .HasFilter("[PEN] IS NOT NULL");

                    b.HasIndex("PanID")
                        .IsUnique()
                        .HasFilter("[PanID] IS NOT NULL");

                    b.HasIndex("ReligionID");

                    b.HasIndex("SexID");

                    b.HasIndex("SpouseReligionID");

                    b.HasIndex("VoterID")
                        .IsUnique()
                        .HasFilter("[VoterID] IS NOT NULL");

                    b.ToTable("EmployeePersonalDetails");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeReligion", b =>
                {
                    b.Property<int>("ReligionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReligionID"));

                    b.Property<string>("ReligionName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ReligionID");

                    b.ToTable("EmployeeReligions");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeSex", b =>
                {
                    b.Property<int>("SexID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexID"));

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SexID");

                    b.ToTable("EmployeeSexes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeID"));

                    b.Property<string>("Employeetype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeTypeID");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.LeaveRequest", b =>
                {
                    b.Property<int>("LeaveRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveRequestID"));

                    b.Property<int?>("ApprovedByID")
                        .HasColumnType("int");

                    b.Property<string>("ApproverComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequestedByID")
                        .HasColumnType("int");

                    b.Property<string>("RequestorComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeaveRequestID");

                    b.HasIndex("ApprovedByID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("RequestedByID");

                    b.HasIndex("StatusID");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Photo", b =>
                {
                    b.Property<int>("PhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoID"));

                    b.Property<string>("PhotoImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhotoID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Privilege", b =>
                {
                    b.Property<int>("PrivilegeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivilegeID"));

                    b.Property<string>("PrivilegeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrivilegeID");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionID"));

                    b.Property<int?>("ApprovedByID")
                        .HasColumnType("int");

                    b.Property<string>("ApproverComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FromSchoolID")
                        .HasColumnType("int");

                    b.Property<int>("PromotedFromDesignationID")
                        .HasColumnType("int");

                    b.Property<int>("PromotedToDesignationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PromotionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequestedByID")
                        .HasColumnType("int");

                    b.Property<string>("RequestorComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("ToSchoolIDApproved")
                        .HasColumnType("int");

                    b.HasKey("PromotionID");

                    b.HasIndex("ApprovedByID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("FromSchoolID");

                    b.HasIndex("PromotedFromDesignationID");

                    b.HasIndex("PromotedToDesignationID");

                    b.HasIndex("RequestedByID");

                    b.HasIndex("StatusID");

                    b.HasIndex("ToSchoolIDApproved");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.PromotionRelinquishment", b =>
                {
                    b.Property<int>("RelinquishmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelinquishmentID"));

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("DocumentID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("yearOfRelinquishment")
                        .HasColumnType("datetime2");

                    b.HasKey("RelinquishmentID");

                    b.HasIndex("DocumentID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PromotionRelinquishments");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.RolePrivilege", b =>
                {
                    b.Property<int>("RolePrivilegeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePrivilegeID"));

                    b.Property<int>("PrivilegeID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("RolePrivilegeID");

                    b.HasIndex("PrivilegeID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePrivileges");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.School", b =>
                {
                    b.Property<int>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("PhotoID")
                        .HasColumnType("int");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrincipalID")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("VicePrincipalID")
                        .HasColumnType("int");

                    b.HasKey("SchoolID");

                    b.HasIndex("CityID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("PhotoID");

                    b.HasIndex("PrincipalID");

                    b.HasIndex("StatusID");

                    b.HasIndex("VicePrincipalID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolClass", b =>
                {
                    b.Property<int>("SchoolClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolClassID"));

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("SchoolID")
                        .HasColumnType("int");

                    b.HasKey("SchoolClassID");

                    b.HasIndex("SchoolID");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolDivisionCount", b =>
                {
                    b.Property<int>("DivisionCountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionCountID"));

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolClassID")
                        .HasColumnType("int");

                    b.Property<int>("StudentCount")
                        .HasColumnType("int");

                    b.HasKey("DivisionCountID");

                    b.HasIndex("SchoolClassID");

                    b.ToTable("SchoolDivisionCounts");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolPosition", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesignationID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("PositionID");

                    b.HasIndex("DesignationID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("StatusID");

                    b.HasIndex("SubjectID");

                    b.ToTable("SchoolPositions");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolStandardType", b =>
                {
                    b.Property<int>("SchoolStandardTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolStandardTypeID"));

                    b.Property<int>("SchoolID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolTypeID")
                        .HasColumnType("int");

                    b.HasKey("SchoolStandardTypeID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("SchoolTypeID");

                    b.ToTable("SchoolStandardTypes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolType", b =>
                {
                    b.Property<int>("SchoolTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolTypeID"));

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<string>("SchoolTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SchoolTypeID");

                    b.ToTable("SchoolTypes");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolTypeDesignation", b =>
                {
                    b.Property<int>("SchoolTypeDesignationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolTypeDesignationID"));

                    b.Property<int>("DesignationID")
                        .HasColumnType("int");

                    b.Property<int>("SchoolTypeID")
                        .HasColumnType("int");

                    b.HasKey("SchoolTypeDesignationID");

                    b.HasIndex("DesignationID");

                    b.HasIndex("SchoolTypeID");

                    b.ToTable("SchoolTypeDesignations");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"));

                    b.Property<string>("SubjectText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.TeacherHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<DateTime?>("ChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChangeFromSchoolID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeToSchoolID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangeTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangedByID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("PromotedFromPositionID")
                        .HasColumnType("int");

                    b.Property<int?>("PromotedToPositionID")
                        .HasColumnType("int");

                    b.HasKey("HistoryID");

                    b.HasIndex("ChangeFromSchoolID");

                    b.HasIndex("ChangeToSchoolID");

                    b.HasIndex("ChangeTypeID");

                    b.HasIndex("ChangedByID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("PromotedFromPositionID");

                    b.HasIndex("PromotedToPositionID");

                    b.ToTable("TeacherHistories");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.TransferRequest", b =>
                {
                    b.Property<int>("TransferRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferRequestID"));

                    b.Property<int?>("ApprovedByID")
                        .HasColumnType("int");

                    b.Property<string>("ApproverComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FromSchoolID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RequestedByID")
                        .HasColumnType("int");

                    b.Property<string>("RequestorComment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StatusChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("ToSchoolIDApproved")
                        .HasColumnType("int");

                    b.Property<int>("ToSchoolID_One")
                        .HasColumnType("int");

                    b.Property<int>("ToSchoolID_Three")
                        .HasColumnType("int");

                    b.Property<int>("ToSchoolID_Two")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransferRequestID");

                    b.HasIndex("ApprovedByID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("FromSchoolID");

                    b.HasIndex("RequestedByID");

                    b.HasIndex("StatusID");

                    b.HasIndex("ToSchoolIDApproved");

                    b.HasIndex("ToSchoolID_One");

                    b.HasIndex("ToSchoolID_Three");

                    b.HasIndex("ToSchoolID_Two");

                    b.ToTable("TransferRequests");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.HasIndex("EmployeeID")
                        .IsUnique()
                        .HasFilter("[EmployeeID] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Course", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.EducationType", "EducationType")
                        .WithMany("Courses")
                        .HasForeignKey("EducationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationType");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.DesignationQualification", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Designation", "Designation")
                        .WithMany("DesignationQualifications")
                        .HasForeignKey("DesignationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Course", "Course")
                        .WithMany("DesignationQualifications")
                        .HasForeignKey("QualificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Document", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("Documents")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Employee", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.ApprovalType", "ApprovalType")
                        .WithMany("Employees")
                        .HasForeignKey("ApprovalTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeCategory", "EmployeeCategory")
                        .WithMany("Employees")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Photo", "Photo")
                        .WithMany("Employees")
                        .HasForeignKey("PhotoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeachersApp.Entity.Models.School", "School")
                        .WithMany("Employees")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.SchoolPosition", "SchoolsPosition")
                        .WithMany("EmployeesPosition")
                        .HasForeignKey("SchoolPositionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("Employees")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Subject", "Subject")
                        .WithMany("Employees")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Supervisor")
                        .WithMany("Employees")
                        .HasForeignKey("SupervisorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovalType");

                    b.Navigation("Designation");

                    b.Navigation("EmployeeCategory");

                    b.Navigation("EmployeeType");

                    b.Navigation("Photo");

                    b.Navigation("School");

                    b.Navigation("SchoolsPosition");

                    b.Navigation("Status");

                    b.Navigation("Subject");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeDocument", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Document", "Document")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeEducation", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Course", "Course")
                        .WithMany("EmployeeEducations")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Document", "Document")
                        .WithMany("EmployeeEducations")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("EmployeeEducations")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");

                    b.Navigation("Document");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeePersonalDetails", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.EmployeeBloodGroup", "BloodGroup")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("BloodGroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeCasteCategory", "CasteCategory")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("CasteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.District", "District")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("TeachersApp.Entity.Models.EmployeePersonalDetails", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeMaritalStatus", "MaritalStatus")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("MaritalStatusID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeReligion", "EmployeeReligion")
                        .WithMany("PersonalDetailsReligionID")
                        .HasForeignKey("ReligionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeSex", "Sex")
                        .WithMany("PersonalDetails")
                        .HasForeignKey("SexID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.EmployeeReligion", "EmployeeSpouseReligion")
                        .WithMany("SpousePersonalDetailsReligionID")
                        .HasForeignKey("SpouseReligionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BloodGroup");

                    b.Navigation("CasteCategory");

                    b.Navigation("District");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeReligion");

                    b.Navigation("EmployeeSpouseReligion");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.LeaveRequest", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.User", "ApprovedByUser")
                        .WithMany("LeaveApprovedByUser")
                        .HasForeignKey("ApprovedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Document", "Document")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.User", "RequestedByUser")
                        .WithMany("LeaveRequestedByUser")
                        .HasForeignKey("RequestedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Document");

                    b.Navigation("Employee");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Promotion", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.User", "ApprovedByUser")
                        .WithMany("PromotionApprovedByUser")
                        .HasForeignKey("ApprovedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("Promotions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "FromSchool")
                        .WithMany("PromotionRequestsFromSchool")
                        .HasForeignKey("FromSchoolID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Designation", "PromotedFromDesignation")
                        .WithMany("PromotionsFrom")
                        .HasForeignKey("PromotedFromDesignationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Designation", "PromotedToDesignation")
                        .WithMany("PromotionsTo")
                        .HasForeignKey("PromotedToDesignationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.User", "RequestedByUser")
                        .WithMany("PromotionRequestedByUser")
                        .HasForeignKey("RequestedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("Promotions")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "ToSchoolApproved")
                        .WithMany("PromotionRequestsToApprovedSchool")
                        .HasForeignKey("ToSchoolIDApproved")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Employee");

                    b.Navigation("FromSchool");

                    b.Navigation("PromotedFromDesignation");

                    b.Navigation("PromotedToDesignation");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Status");

                    b.Navigation("ToSchoolApproved");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.PromotionRelinquishment", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Document", "Document")
                        .WithMany("PromotionRelinquishments")
                        .HasForeignKey("DocumentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("PromotionRelinquishments")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.RolePrivilege", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Privilege", "Privilege")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("PrivilegeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Role", "Role")
                        .WithMany("RolePrivileges")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Privilege");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.School", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.City", "City")
                        .WithMany("Schools")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Employee", null)
                        .WithMany("Schools")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("TeachersApp.Entity.Models.Photo", "Photo")
                        .WithMany("Schools")
                        .HasForeignKey("PhotoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("Schools")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Employee", "VicePrincipal")
                        .WithMany()
                        .HasForeignKey("VicePrincipalID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("City");

                    b.Navigation("Photo");

                    b.Navigation("Principal");

                    b.Navigation("Status");

                    b.Navigation("VicePrincipal");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolClass", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.School", "School")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolDivisionCount", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.SchoolClass", "SchoolClass")
                        .WithMany("SchoolDivisionCounts")
                        .HasForeignKey("SchoolClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolClass");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolPosition", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Designation", "Designation")
                        .WithMany("SchoolPositions")
                        .HasForeignKey("DesignationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "School")
                        .WithMany("SchoolPositions")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("SchoolPositions")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Subject", "Subject")
                        .WithMany("SchoolPositions")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("School");

                    b.Navigation("Status");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolStandardType", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.School", "School")
                        .WithMany("SchoolStandardTypes")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.SchoolType", "SchoolType")
                        .WithMany("SchoolStandardTypes")
                        .HasForeignKey("SchoolTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolTypeDesignation", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Designation", "Designation")
                        .WithMany("SchoolTypeDesignations")
                        .HasForeignKey("DesignationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.SchoolType", "SchoolType")
                        .WithMany("SchoolTypeDesignations")
                        .HasForeignKey("SchoolTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Designation");

                    b.Navigation("SchoolType");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.TeacherHistory", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.School", "SchoolFrom")
                        .WithMany("TeacherHistoriesFrom")
                        .HasForeignKey("ChangeFromSchoolID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.School", "SchoolTo")
                        .WithMany("TeacherHistoriesTo")
                        .HasForeignKey("ChangeToSchoolID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.ChangeType", "ChangeType")
                        .WithMany("TeacherHistories")
                        .HasForeignKey("ChangeTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.User", "ChangedByUser")
                        .WithMany("TeacherHistoryChangedByUser")
                        .HasForeignKey("ChangedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("TeacherHistories")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.Designation", "PromotedFromDesignation")
                        .WithMany("TeacherHistoryPromotionsFrom")
                        .HasForeignKey("PromotedFromPositionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Designation", "PromotedToDesignation")
                        .WithMany("TeacherHistoryPromotionsTo")
                        .HasForeignKey("PromotedToPositionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ChangeType");

                    b.Navigation("ChangedByUser");

                    b.Navigation("Employee");

                    b.Navigation("PromotedFromDesignation");

                    b.Navigation("PromotedToDesignation");

                    b.Navigation("SchoolFrom");

                    b.Navigation("SchoolTo");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.TransferRequest", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.User", "ApprovedByUser")
                        .WithMany("TransferApprovedByUser")
                        .HasForeignKey("ApprovedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithMany("TransferRequests")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "FromSchool")
                        .WithMany("TransferRequestsFrom")
                        .HasForeignKey("FromSchoolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.User", "RequestedByUser")
                        .WithMany("TransferRequestedByUser")
                        .HasForeignKey("RequestedByID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Status", "Status")
                        .WithMany("TransferRequests")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "ToSchoolApproved")
                        .WithMany("TransferRequestsToApproved")
                        .HasForeignKey("ToSchoolIDApproved")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.School", "ToSchool_One")
                        .WithMany("TransferRequestsToOne")
                        .HasForeignKey("ToSchoolID_One")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "ToSchool_Three")
                        .WithMany("TransferRequestsToThree")
                        .HasForeignKey("ToSchoolID_Three")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TeachersApp.Entity.Models.School", "ToSchool_Two")
                        .WithMany("TransferRequestsToTwo")
                        .HasForeignKey("ToSchoolID_Two")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Employee");

                    b.Navigation("FromSchool");

                    b.Navigation("RequestedByUser");

                    b.Navigation("Status");

                    b.Navigation("ToSchoolApproved");

                    b.Navigation("ToSchool_One");

                    b.Navigation("ToSchool_Three");

                    b.Navigation("ToSchool_Two");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.User", b =>
                {
                    b.HasOne("TeachersApp.Entity.Models.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("TeachersApp.Entity.Models.User", "EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TeachersApp.Entity.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.ApprovalType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.ChangeType", b =>
                {
                    b.Navigation("TeacherHistories");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.City", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Course", b =>
                {
                    b.Navigation("DesignationQualifications");

                    b.Navigation("EmployeeEducations");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Designation", b =>
                {
                    b.Navigation("DesignationQualifications");

                    b.Navigation("Employees");

                    b.Navigation("PromotionsFrom");

                    b.Navigation("PromotionsTo");

                    b.Navigation("SchoolPositions");

                    b.Navigation("SchoolTypeDesignations");

                    b.Navigation("TeacherHistoryPromotionsFrom");

                    b.Navigation("TeacherHistoryPromotionsTo");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.District", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Document", b =>
                {
                    b.Navigation("EmployeeDocuments");

                    b.Navigation("EmployeeEducations");

                    b.Navigation("LeaveRequests");

                    b.Navigation("PromotionRelinquishments");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EducationType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Employee", b =>
                {
                    b.Navigation("EmployeeDocuments");

                    b.Navigation("EmployeeEducations");

                    b.Navigation("Employees");

                    b.Navigation("LeaveRequests");

                    b.Navigation("PersonalDetails")
                        .IsRequired();

                    b.Navigation("PromotionRelinquishments");

                    b.Navigation("Promotions");

                    b.Navigation("Schools");

                    b.Navigation("TeacherHistories");

                    b.Navigation("TransferRequests");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeBloodGroup", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeCasteCategory", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeCategory", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeMaritalStatus", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeReligion", b =>
                {
                    b.Navigation("PersonalDetailsReligionID");

                    b.Navigation("SpousePersonalDetailsReligionID");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeSex", b =>
                {
                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Photo", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Privilege", b =>
                {
                    b.Navigation("RolePrivileges");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Role", b =>
                {
                    b.Navigation("RolePrivileges");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.School", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("PromotionRequestsFromSchool");

                    b.Navigation("PromotionRequestsToApprovedSchool");

                    b.Navigation("SchoolClasses");

                    b.Navigation("SchoolPositions");

                    b.Navigation("SchoolStandardTypes");

                    b.Navigation("TeacherHistoriesFrom");

                    b.Navigation("TeacherHistoriesTo");

                    b.Navigation("TransferRequestsFrom");

                    b.Navigation("TransferRequestsToApproved");

                    b.Navigation("TransferRequestsToOne");

                    b.Navigation("TransferRequestsToThree");

                    b.Navigation("TransferRequestsToTwo");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolClass", b =>
                {
                    b.Navigation("SchoolDivisionCounts");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolPosition", b =>
                {
                    b.Navigation("EmployeesPosition");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.SchoolType", b =>
                {
                    b.Navigation("SchoolStandardTypes");

                    b.Navigation("SchoolTypeDesignations");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Status", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Employees");

                    b.Navigation("LeaveRequests");

                    b.Navigation("Promotions");

                    b.Navigation("SchoolPositions");

                    b.Navigation("Schools");

                    b.Navigation("TransferRequests");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.Subject", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SchoolPositions");
                });

            modelBuilder.Entity("TeachersApp.Entity.Models.User", b =>
                {
                    b.Navigation("LeaveApprovedByUser");

                    b.Navigation("LeaveRequestedByUser");

                    b.Navigation("PromotionApprovedByUser");

                    b.Navigation("PromotionRequestedByUser");

                    b.Navigation("TeacherHistoryChangedByUser");

                    b.Navigation("TransferApprovedByUser");

                    b.Navigation("TransferRequestedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
